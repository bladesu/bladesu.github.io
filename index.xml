<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blade Su The Coder</title>
    <link>https://bladesu.github.io/</link>
    <description>Recent content on Blade Su The Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 12 Mar 2020 16:34:43 +0800</lastBuildDate>
    
	<atom:link href="https://bladesu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>_Contents(Read Me)</title>
      <link>https://bladesu.github.io/learning/debugger/gdb/_contents/</link>
      <pubDate>Thu, 12 Mar 2020 16:34:43 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/debugger/gdb/_contents/</guid>
      <description>GDB: The GNU Project Debugger GDB is the debugger for C/C++ development. Here I put my notes about this wonderful tool.
Installation Show how to install GDB and related tools.
Basic usage Basic usage knowlege for GDB.</description>
    </item>
    
    <item>
      <title>Basic_usage</title>
      <link>https://bladesu.github.io/learning/debugger/gdb/basic_usage/</link>
      <pubDate>Thu, 12 Mar 2020 16:30:55 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/debugger/gdb/basic_usage/</guid>
      <description>First: Add debug option when compiling.  GDB needs the debugging information provided by compiler. The debugger option should be on when generating object file for code line number or others.
For C language compiled by GCC: In general, use -g option, according to GCC documentation:
 -g Produce debugging information in the operating system&amp;rsquo;s native format (stabs, COFF, XCOFF, or DWARF 2). GDB can work with this debugging information.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://bladesu.github.io/learning/debugger/gdb/installation/</link>
      <pubDate>Thu, 12 Mar 2020 15:30:58 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/debugger/gdb/installation/</guid>
      <description>GDB in Ubuntu:
sudo apt-get install gdb GDB dashborad(Recommended) A good UI written using Python API that enables a modular interface showing relevant information about the program being debugged.
# Get .gdbinit file to user home. wget -P ~ https://git.io/.gdbinit Usage: the dashborad will be invoked when running goal process in GDB.</description>
    </item>
    
    <item>
      <title>_Contents(Read Me)</title>
      <link>https://bladesu.github.io/learning/building_tool/gnu_make/unusual_syntax/_contents/</link>
      <pubDate>Fri, 06 Mar 2020 23:33:27 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/building_tool/gnu_make/unusual_syntax/_contents/</guid>
      <description>Here I will continously update some contents about sytanx in GNU make which is uncommon I think or ones is not eaily understood by intuition. If you have interesting about that, you will gain big benefit from reading the document(https://www.gnu.org/software/make/manual/make.html).
Automatic Variables The Automatic variables feature of GUN make allow you have variable whose value computed afresh for each rule that is executed in the runtime.
$@ and $&amp;lt; pair  Static Pattern Rules Cited from documentation(4.</description>
    </item>
    
    <item>
      <title>Static pattern rules</title>
      <link>https://bladesu.github.io/learning/building_tool/gnu_make/unusual_syntax/static_pattern_rules/</link>
      <pubDate>Fri, 06 Mar 2020 23:32:27 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/building_tool/gnu_make/unusual_syntax/static_pattern_rules/</guid>
      <description>syntax:
targets …: target-pattern: prereq-patterns … recipe … use case:
 Makefile C subdirectory rule to make obj  </description>
    </item>
    
    <item>
      <title>Start editing learning note for GNU make.</title>
      <link>https://bladesu.github.io/posts/2020/03/04/start_gnu_make/</link>
      <pubDate>Wed, 04 Mar 2020 22:19:33 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/03/04/start_gnu_make/</guid>
      <description>GNU make should be most generous building tool or fundation of large building system for C/C++ project. Here I start to write some note for problems when applying GNU make into my projects. It should be updated here: learning/building_tool.</description>
    </item>
    
    <item>
      <title>Automatic Variables: $@ and $&lt; pair</title>
      <link>https://bladesu.github.io/learning/building_tool/gnu_make/unusual_syntax/auto_var_1/</link>
      <pubDate>Wed, 04 Mar 2020 20:36:41 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/building_tool/gnu_make/unusual_syntax/auto_var_1/</guid>
      <description>note:  $@ is the file name of the target of the rule. Also it apply the pattern rules for multiple files. $&amp;lt; is the name of the first prerequiste. It also follow the implicit rule. $@ can not be used within the prerequisites list except secondary expansion feature is applied  case study *.o: *.c dependency.h gcc -c -o $@ $&amp;lt; -I. In this case, I define the rule that if each file suffixed with .</description>
    </item>
    
    <item>
      <title>Coding in C, C standard should be most reliable reference material than everything.</title>
      <link>https://bladesu.github.io/posts/2020/03/03/standard_is_most_important_in_c/</link>
      <pubDate>Tue, 03 Mar 2020 22:22:27 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/03/03/standard_is_most_important_in_c/</guid>
      <description>Recently, I start to code a lot in c language. One of my studying material is &amp;ldquo;Head First C&amp;rdquo; written by David Griffith. And I am so confused about an example it talking about XOR encrption.
void encrpt(char *mes) { while (*mes) { *mes = *mes ^ 31; mes++; } } } This code could be compiled without any error or warning (Apple LLVM version 9.1.0 (clang-902.0.39.1)). But I am really curious about how XOR operator worker on the two operand *mes and the integer literal 31.</description>
    </item>
    
    <item>
      <title>My first post</title>
      <link>https://bladesu.github.io/posts/2020/02/19/my-first-post/</link>
      <pubDate>Wed, 19 Feb 2020 18:56:57 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/02/19/my-first-post/</guid>
      <description>Thank you for reading this post. This is the first one in my blog.
Since I had connected to internect, I got a lot of knowlege from enormous amount of website. However it really hard to digest and organize all of them.
So I start this blog to put my idea and information collected. If I take something wrong, or you gain from something here. Please give me feedback, thank you.</description>
    </item>
    
  </channel>
</rss>