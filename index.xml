<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blade Su The Coder</title>
    <link>https://bladesu.github.io/</link>
    <description>Recent content on Blade Su The Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 09 Jun 2020 00:38:08 +0800</lastBuildDate>
    
	<atom:link href="https://bladesu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Porting Qt libraries and application to ARM-based environment,</title>
      <link>https://bladesu.github.io/posts/2020/06/08/qt_porting/</link>
      <pubDate>Tue, 09 Jun 2020 00:38:08 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/06/08/qt_porting/</guid>
      <description>Here I make a practice for application porting to ARM-based environment with leverage of docker container as build platform. This post contains not only application porting but also the Qt library. Finally I demonstrate the GUI application on a target platform(OrangePi, with sunxi H6 CPU) via VNC connection. Here is the link https://bladesu.github.io/learning/devops/cross_compilation/porting_app/qt_porting_orange_pi/.</description>
    </item>
    
    <item>
      <title>An cross-compiling exercise: porting Qt Application to ARM-base environment with docker environment. </title>
      <link>https://bladesu.github.io/learning/devops/cross_compilation/porting_app/qt_porting_orange_pi/</link>
      <pubDate>Mon, 08 Jun 2020 22:01:29 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/devops/cross_compilation/porting_app/qt_porting_orange_pi/</guid>
      <description>Recently I finish a exercise that porting Qt-based application from my development environment (Mac OS 10.13.6) to an ARM-based environment(Orange Pi with sunxi H6 SoC). Moreover, I create a docker container as cross-compiling environment with assigned toolchain for ARM.
If we want to run a Qt application on a machine with ARM CPU, we need to prepare built the libraries for Qt runtime. Not only the libraries but the application should be built with the ARM toolchain.</description>
    </item>
    
    <item>
      <title>My implementation of malloc and free</title>
      <link>https://bladesu.github.io/posts/2020/05/15/impl_malloc_free_v1/</link>
      <pubDate>Fri, 15 May 2020 20:17:56 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/05/15/impl_malloc_free_v1/</guid>
      <description>Recently I implement a easier version of malloc and free. It is a practice of implementation of malloc and free to see the detail of how heap memory manipulation with system call by wraping functions in malloc library. Here is the link:https://bladesu.github.io/learning/linux_app/memory/impl_malloc_free_v1/.</description>
    </item>
    
    <item>
      <title>Simple implementation of malloc and free with sbrk system call.</title>
      <link>https://bladesu.github.io/learning/linux_app/memory/impl_malloc_free_v1/</link>
      <pubDate>Fri, 15 May 2020 14:28:30 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/linux_app/memory/impl_malloc_free_v1/</guid>
      <description>To get familiar with heap memory operation in linux, I try to implement a easy one of malloc and free with leverage of system call sbrk().
void *malloc(size_t size); // return pointer to allocted heap memory with assigned size. void free(void *ptr); // release the allocated heap memory with *ptr. void * sbrk(intptr_t incr); // return prior program break. First, we start the topic with some notes about sbrk:
 The current value of the program break may be determined by calling sbrk(0).</description>
    </item>
    
    <item>
      <title>Do not call putenv() with a pointer to an automatic variable as the argument</title>
      <link>https://bladesu.github.io/posts/2020/05/08/about_posix_putenv/</link>
      <pubDate>Fri, 08 May 2020 09:34:44 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/05/08/about_posix_putenv/</guid>
      <description>New post here:https://bladesu.github.io/learning/linux_app/process/auto_vara_n_putenv
Here is the result of my: Do not call putenv() with a pointer to an automatic variable as the argument. This quite simple rule take me some time to find out why. And a little surprise here, I find there are the rules defined by CERT about C programing. That is cool! Good job, physicists.</description>
    </item>
    
    <item>
      <title>Do not call putenv() with a pointer to an automatic variable as the argument</title>
      <link>https://bladesu.github.io/learning/linux_app/process/auto_vara_n_putenv/</link>
      <pubDate>Thu, 07 May 2020 18:01:18 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/linux_app/process/auto_vara_n_putenv/</guid>
      <description>Recently I study the chapters in the book: The Linux Programming Interface, and make exercises in the end of every chapters. Here I get some extra information in a exercise to implement setenv() and unetenv() functionn using getenv() and putenv() in chapter 6. They are used to handling the environment variable within a process including adding or removing one. Here is the complete problem:
 (6.3) Implement setenv() and unsetenv() using getenv(), putenv(), and, where necessary, code that directly modifies environ.</description>
    </item>
    
    <item>
      <title>Posix API introduction: mkstemp.</title>
      <link>https://bladesu.github.io/posts/2020/04/30/post_for_linux_api_mkstemp/</link>
      <pubDate>Thu, 30 Apr 2020 17:28:42 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/04/30/post_for_linux_api_mkstemp/</guid>
      <description>A new post here: https://bladesu.github.io/learning/linux_app/fileio/api_mkstemp/
I start to introduce the some knowledge about system calls, posix API and application implementation on linux platform. Here we start with a convenient posix API mkstemp. Any feedbask is welcome, thank you.</description>
    </item>
    
    <item>
      <title>Posix API:mkstemp, why it needs a char array as input.</title>
      <link>https://bladesu.github.io/learning/linux_app/fileio/api_mkstemp/</link>
      <pubDate>Thu, 30 Apr 2020 16:00:03 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/linux_app/fileio/api_mkstemp/</guid>
      <description>Sometimes we need a temporary file to store data in our implementation. For development on linux platform, a convenient choice is writing a file under the folder /tmp. After reboot of OS, those files at least is not persist anymore. However, it needs more consideration to such a “temporary” file. For example, considering about uniqueness. It could be a bad idea that a hardcode file name for a program which could have multiple instances.</description>
    </item>
    
    <item>
      <title>About string processing in C language.</title>
      <link>https://bladesu.github.io/posts/2020/04/07/post_for_c_string/</link>
      <pubDate>Tue, 07 Apr 2020 15:08:07 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/04/07/post_for_c_string/</guid>
      <description>A new post here: https://bladesu.github.io/learning/computer_languages/c_lang/confusing_concepts/pointer_to_char_and_string/
I introduce the some knowledge in C language for string processing here. Do you confuse about string in C? char *, string literal, char array, which one should I use in some case? If you have same problem, please read this article.</description>
    </item>
    
    <item>
      <title>Contents(Read Me First)</title>
      <link>https://bladesu.github.io/learning/computer_languages/c_lang/confusing_concepts/contents/</link>
      <pubDate>Mon, 23 Mar 2020 23:10:24 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/computer_languages/c_lang/confusing_concepts/contents/</guid>
      <description>Learning about confusing issue about string processing.
 String processing  </description>
    </item>
    
    <item>
      <title>Some confusing issue for processing string in C language.</title>
      <link>https://bladesu.github.io/learning/computer_languages/c_lang/confusing_concepts/pointer_to_char_and_string/</link>
      <pubDate>Mon, 23 Mar 2020 23:09:24 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/computer_languages/c_lang/confusing_concepts/pointer_to_char_and_string/</guid>
      <description>Introduction There is no real primitive &amp;ldquo;string&amp;rdquo; object in C language. From a perspective of data processing, a string is a contiguous sequence of characters ended with &#39;\0&amp;rsquo; or so-called NUL terminator. The serious properties about string had beed defined in C standard. For example, session 7.1 in C99 standard, it would be really gainful to read C standard carefully. Here I introduce some properties we needed to know for writing C code.</description>
    </item>
    
    <item>
      <title>Introduction with docker buildx for multiple CPU architecture development.</title>
      <link>https://bladesu.github.io/posts/2020/03/18/first_glance2docker_buildx/</link>
      <pubDate>Wed, 18 Mar 2020 21:02:23 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/03/18/first_glance2docker_buildx/</guid>
      <description>A new update here: learning/devops/cross_compilation/dockerized/0000_first_try.md
Here I introduce the new docker desktop feature which integrated with qemu and docker buildx command. Now we can build applications in docker images executed with different CPU architectures and run them above operation system with docker environment installed.</description>
    </item>
    
    <item>
      <title>Contents(Read Me First)</title>
      <link>https://bladesu.github.io/learning/devops/cross_compilation/dockerized/contents/</link>
      <pubDate>Wed, 18 Mar 2020 19:33:17 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/devops/cross_compilation/dockerized/contents/</guid>
      <description>Docker images and container deployment for multiple CPU architecture developments.  A first glance for ARM docker container building and running  </description>
    </item>
    
    <item>
      <title>First try to development with ARM docker container[Experimental Feature]</title>
      <link>https://bladesu.github.io/learning/devops/cross_compilation/dockerized/0000_first_try/</link>
      <pubDate>Wed, 18 Mar 2020 11:44:16 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/devops/cross_compilation/dockerized/0000_first_try/</guid>
      <description>Build once, run everywhere. Like Java language. Here comes a convenient way to write and deploy application with multiple CPU archtecture articultures attributed by integrated dockerized environments: Docker Desktop(after v2.1.0)
Prepare Docker environment: The environment in this demo I prepared:
 host os: macOS High Sierra 10.13.6 docker environment: integrated in docker desktop v2.1.0.5 (you can check stable release here:link)  Here we need to use docker buildx command, which is provided by docker desktop after v2.</description>
    </item>
    
    <item>
      <title>A bug in docker desktop 2.2.0 for Mac OS</title>
      <link>https://bladesu.github.io/posts/2020/03/16/docker_desktop_bug/</link>
      <pubDate>Mon, 16 Mar 2020 16:38:31 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/03/16/docker_desktop_bug/</guid>
      <description>For Mac OS user, it should be a easy choice that applying Docker Desktop for docker environment setup. However I got a bug with container starting up for port binding, port 111 was in used status by Desktop I thought. It is a bug for Docker Desktop 2.2.0. Some user in the community had found it, I think it should be solved in the following version.
 https://github.com/docker/compose/issues/7188?fbclid=IwAR1qP7SstbtNA6em-yqFOZ4u172iB4HOVbA9rK26pvsVZaq8eXulPVE4iXQ https://github.com/docker/for-mac/issues/4264  updated: it is solved and fixed in docker desktop Docker Desktop Community 2.</description>
    </item>
    
    <item>
      <title>Contents(Read Me First)</title>
      <link>https://bladesu.github.io/learning/debugger/gdb/contents/</link>
      <pubDate>Thu, 12 Mar 2020 16:34:43 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/debugger/gdb/contents/</guid>
      <description>GDB: The GNU Project Debugger GDB is the debugger for C/C++ development. Here I put my notes about this wonderful tool.
Installation Show how to install GDB and related tools.
Basic usage Basic usage knowlege for GDB.</description>
    </item>
    
    <item>
      <title>Basic_usage</title>
      <link>https://bladesu.github.io/learning/debugger/gdb/basic_usage/</link>
      <pubDate>Thu, 12 Mar 2020 16:30:55 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/debugger/gdb/basic_usage/</guid>
      <description>First: Add debug option when compiling.  GDB needs the debugging information provided by compiler. The debugger option should be on when generating object file for code line number or others.
For C language compiled by GCC: In general, use -g option, according to GCC documentation:
 -g Produce debugging information in the operating system&amp;rsquo;s native format (stabs, COFF, XCOFF, or DWARF 2). GDB can work with this debugging information.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://bladesu.github.io/learning/debugger/gdb/installation/</link>
      <pubDate>Thu, 12 Mar 2020 15:30:58 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/debugger/gdb/installation/</guid>
      <description>GDB in Ubuntu:
sudo apt-get install gdb GDB dashborad(Recommended) A good UI written using Python API that enables a modular interface showing relevant information about the program being debugged.
# Get .gdbinit file to user home. wget -P ~ https://git.io/.gdbinit Usage: the dashborad will be invoked when running goal process in GDB.</description>
    </item>
    
    <item>
      <title>Contents(Read Me First)</title>
      <link>https://bladesu.github.io/learning/building_tool/gnu_make/unusual_syntax/contents/</link>
      <pubDate>Fri, 06 Mar 2020 23:33:27 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/building_tool/gnu_make/unusual_syntax/contents/</guid>
      <description>Here I will continously update some contents about sytanx in GNU make which is uncommon I think or ones is not eaily understood by intuition. If you have interesting about that, you will gain big benefit from reading the document(https://www.gnu.org/software/make/manual/make.html).
Automatic Variables The Automatic variables feature of GUN make allow you have variable whose value computed afresh for each rule that is executed in the runtime.
$@ and $&amp;lt; pair  Static Pattern Rules Cited from documentation(4.</description>
    </item>
    
    <item>
      <title>Static pattern rules</title>
      <link>https://bladesu.github.io/learning/building_tool/gnu_make/unusual_syntax/static_pattern_rules/</link>
      <pubDate>Fri, 06 Mar 2020 23:32:27 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/building_tool/gnu_make/unusual_syntax/static_pattern_rules/</guid>
      <description>syntax:
targets …: target-pattern: prereq-patterns … recipe … use case:
 Makefile C subdirectory rule to make obj  </description>
    </item>
    
    <item>
      <title>Start editing learning note for GNU make.</title>
      <link>https://bladesu.github.io/posts/2020/03/04/start_gnu_make/</link>
      <pubDate>Wed, 04 Mar 2020 22:19:33 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/03/04/start_gnu_make/</guid>
      <description>GNU make should be most generous building tool or fundation of large building system for C/C++ project. Here I start to write some note for problems when applying GNU make into my projects. It should be updated here: learning/building_tool.</description>
    </item>
    
    <item>
      <title>Automatic Variables: $@ and $&lt; pair</title>
      <link>https://bladesu.github.io/learning/building_tool/gnu_make/unusual_syntax/auto_var_1/</link>
      <pubDate>Wed, 04 Mar 2020 20:36:41 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/building_tool/gnu_make/unusual_syntax/auto_var_1/</guid>
      <description>note:  $@ is the file name of the target of the rule. Also it apply the pattern rules for multiple files. $&amp;lt; is the name of the first prerequiste. It also follow the implicit rule. $@ can not be used within the prerequisites list except secondary expansion feature is applied  case study *.o: *.c dependency.h gcc -c -o $@ $&amp;lt; -I. In this case, I define the rule that if each file suffixed with .</description>
    </item>
    
    <item>
      <title>Coding in C, C standard should be most reliable reference material than everything.</title>
      <link>https://bladesu.github.io/posts/2020/03/03/standard_is_most_important_in_c/</link>
      <pubDate>Tue, 03 Mar 2020 22:22:27 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/03/03/standard_is_most_important_in_c/</guid>
      <description>Recently, I start to code a lot in c language. One of my studying material is &amp;ldquo;Head First C&amp;rdquo; written by David Griffith. And I am so confused about an example it talking about XOR encrption.
void encrpt(char *mes) { while (*mes) { *mes = *mes ^ 31; mes++; } } } This code could be compiled without any error or warning (Apple LLVM version 9.1.0 (clang-902.0.39.1)). But I am really curious about how XOR operator worker on the two operand *mes and the integer literal 31.</description>
    </item>
    
    <item>
      <title>My first post</title>
      <link>https://bladesu.github.io/posts/2020/02/19/my-first-post/</link>
      <pubDate>Wed, 19 Feb 2020 18:56:57 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/02/19/my-first-post/</guid>
      <description>Thank you for reading this post. This is the first one in my blog.
Since I had connected to internect, I got a lot of knowlege from enormous amount of website. However it really hard to digest and organize all of them.
So I start this blog to put my idea and information collected. If I take something wrong, or you gain from something here. Please give me feedback, thank you.</description>
    </item>
    
  </channel>
</rss>