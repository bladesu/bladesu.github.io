<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linaro on Blade Su The Coder</title>
    <link>https://bladesu.github.io/tags/linaro/</link>
    <description>Recent content in linaro on Blade Su The Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 23 Jun 2020 16:39:44 +0800</lastBuildDate>
    
	<atom:link href="https://bladesu.github.io/tags/linaro/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Try to make cross-compiling environment with library directory linked to target platform.</title>
      <link>https://bladesu.github.io/posts/2020/06/23/cmake_sshs_opencv/</link>
      <pubDate>Tue, 23 Jun 2020 16:39:44 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/06/23/cmake_sshs_opencv/</guid>
      <description>Recently I try to make cross-compiling environment with library directory linked to target platform. In the end, not all library is recognized by CMake, however, it is a light-weight approach to build a application with cross-compiling.
https://bladesu.github.io/learning/devops/cross_compilation/dockerized/0001_cmake_sshfs_opencv/</description>
    </item>
    
    <item>
      <title>Apply cmake and pkg-config with mounted target root file system</title>
      <link>https://bladesu.github.io/learning/devops/cross_compilation/dockerized/0001_cmake_sshfs_opencv/</link>
      <pubDate>Tue, 23 Jun 2020 16:19:22 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/devops/cross_compilation/dockerized/0001_cmake_sshfs_opencv/</guid>
      <description>git repository: link
This is a project that I try to make a cross-compile environment which link to libraries of targetâ€™s platform with sshfs in a light-weight docker container. I try to compile OpenCV 3.4.10 for the the target board PYNQ-Z2 with Xilinx XC7Z020-1CLG400C SOC.
First, I try to dig the toolchain applied in the board by gcc -v
xilinx@pynq:/usr/local/bin$ gcc -v Using built-in specs. COLLECT_GCC=gcc COLLECT_LTO_WRAPPER=/usr/lib/gcc/arm-linux-gnueabihf/7/lto-wrapper Target: arm-linux-gnueabihf Configured with: .</description>
    </item>
    
  </channel>
</rss>