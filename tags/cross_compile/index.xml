<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cross_compile on Blade Su The Coder</title>
    <link>https://bladesu.github.io/tags/cross_compile/</link>
    <description>Recent content in cross_compile on Blade Su The Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 23 Jun 2020 16:19:22 +0800</lastBuildDate>
    
	<atom:link href="https://bladesu.github.io/tags/cross_compile/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Apply cmake and pkg-config with mounted target root file system</title>
      <link>https://bladesu.github.io/learning/devops/cross_compilation/dockerized/0001_cmake_sshfs_opencv/</link>
      <pubDate>Tue, 23 Jun 2020 16:19:22 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/devops/cross_compilation/dockerized/0001_cmake_sshfs_opencv/</guid>
      <description>git repository: link
This is a project that I try to make a cross-compile environment which link to libraries of targetâ€™s platform with sshfs in a light-weight docker container. I try to compile OpenCV 3.4.10 for the the target board PYNQ-Z2 with Xilinx XC7Z020-1CLG400C SOC.
First, I try to dig the toolchain applied in the board by gcc -v
xilinx@pynq:/usr/local/bin$ gcc -v Using built-in specs. COLLECT_GCC=gcc COLLECT_LTO_WRAPPER=/usr/lib/gcc/arm-linux-gnueabihf/7/lto-wrapper Target: arm-linux-gnueabihf Configured with: .</description>
    </item>
    
    <item>
      <title>Porting Qt libraries and application to ARM-based environment,</title>
      <link>https://bladesu.github.io/posts/2020/06/08/qt_porting/</link>
      <pubDate>Tue, 09 Jun 2020 00:38:08 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/06/08/qt_porting/</guid>
      <description>Here I make a practice for application porting to ARM-based environment with leverage of docker container as build platform. This post contains not only application porting but also the Qt library. Finally I demonstrate the GUI application on a target platform(OrangePi, with sunxi H6 CPU) via VNC connection. Here is the link https://bladesu.github.io/learning/devops/cross_compilation/porting_app/qt_porting_orange_pi/.</description>
    </item>
    
    <item>
      <title>An cross-compiling exercise: porting Qt Application to ARM-base environment with docker environment. </title>
      <link>https://bladesu.github.io/learning/devops/cross_compilation/porting_app/qt_porting_orange_pi/</link>
      <pubDate>Mon, 08 Jun 2020 22:01:29 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/devops/cross_compilation/porting_app/qt_porting_orange_pi/</guid>
      <description>Recently I finish a exercise that porting Qt-based application from my development environment (Mac OS 10.13.6) to an ARM-based environment(Orange Pi with sunxi H6 SoC). Moreover, I create a docker container as cross-compiling environment with assigned toolchain for ARM.
If we want to run a Qt application on a machine with ARM CPU, we need to prepare built the libraries for Qt runtime. Not only the libraries but the application should be built with the ARM toolchain.</description>
    </item>
    
  </channel>
</rss>