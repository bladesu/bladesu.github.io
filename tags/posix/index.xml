<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>posix on Blade Su The Coder</title>
    <link>https://bladesu.github.io/tags/posix/</link>
    <description>Recent content in posix on Blade Su The Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 15 May 2020 20:17:56 +0800</lastBuildDate>
    
	<atom:link href="https://bladesu.github.io/tags/posix/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>My implementation of malloc and free</title>
      <link>https://bladesu.github.io/posts/2020/05/15/impl_malloc_free_v1/</link>
      <pubDate>Fri, 15 May 2020 20:17:56 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/05/15/impl_malloc_free_v1/</guid>
      <description>Recently I implement a easier version of malloc and free. It is a practice of implementation of malloc and free to see the detail of how heap memory manipulation with system call by wraping functions in malloc library. Here is the link:https://bladesu.github.io/learning/linux_app/memory/impl_malloc_free_v1/.</description>
    </item>
    
    <item>
      <title>Simple implementation of malloc and free with sbrk system call.</title>
      <link>https://bladesu.github.io/learning/linux_app/memory/impl_malloc_free_v1/</link>
      <pubDate>Fri, 15 May 2020 14:28:30 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/linux_app/memory/impl_malloc_free_v1/</guid>
      <description>To get familiar with heap memory operation in linux, I try to implement a easy one of malloc and free with leverage of system call sbrk().
void *malloc(size_t size); // return pointer to allocted heap memory with assigned size. void free(void *ptr); // release the allocated heap memory with *ptr. void * sbrk(intptr_t incr); // return prior program break. First, we start the topic with some notes about sbrk:
 The current value of the program break may be determined by calling sbrk(0).</description>
    </item>
    
    <item>
      <title>Do not call putenv() with a pointer to an automatic variable as the argument</title>
      <link>https://bladesu.github.io/posts/2020/05/08/about_posix_putenv/</link>
      <pubDate>Fri, 08 May 2020 09:34:44 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/05/08/about_posix_putenv/</guid>
      <description>New post here:https://bladesu.github.io/learning/linux_app/process/auto_vara_n_putenv
Here is the result of my: Do not call putenv() with a pointer to an automatic variable as the argument. This quite simple rule take me some time to find out why. And a little surprise here, I find there are the rules defined by CERT about C programing. That is cool! Good job, physicists.</description>
    </item>
    
    <item>
      <title>Do not call putenv() with a pointer to an automatic variable as the argument</title>
      <link>https://bladesu.github.io/learning/linux_app/process/auto_vara_n_putenv/</link>
      <pubDate>Thu, 07 May 2020 18:01:18 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/linux_app/process/auto_vara_n_putenv/</guid>
      <description>Recently I study the chapters in the book: The Linux Programming Interface, and make exercises in the end of every chapters. Here I get some extra information in a exercise to implement setenv() and unetenv() functionn using getenv() and putenv() in chapter 6. They are used to handling the environment variable within a process including adding or removing one. Here is the complete problem:
 (6.3) Implement setenv() and unsetenv() using getenv(), putenv(), and, where necessary, code that directly modifies environ.</description>
    </item>
    
    <item>
      <title>Posix API:mkstemp, why it needs a char array as input.</title>
      <link>https://bladesu.github.io/learning/linux_app/fileio/api_mkstemp/</link>
      <pubDate>Thu, 30 Apr 2020 16:00:03 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/linux_app/fileio/api_mkstemp/</guid>
      <description>Sometimes we need a temporary file to store data in our implementation. For development on linux platform, a convenient choice is writing a file under the folder /tmp. After reboot of OS, those files at least is not persist anymore. However, it needs more consideration to such a “temporary” file. For example, considering about uniqueness. It could be a bad idea that a hardcode file name for a program which could have multiple instances.</description>
    </item>
    
  </channel>
</rss>