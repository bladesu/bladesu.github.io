<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blade Su The Coder</title>
    <link>https://bladesu.github.io/posts/</link>
    <description>Recent content in Posts on Blade Su The Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 26 Jun 2020 15:04:08 +0800</lastBuildDate>
    
	<atom:link href="https://bladesu.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deploy yolo v3 to PYNQ-Z2 development board with leverage to calculatipn power CPU</title>
      <link>https://bladesu.github.io/posts/2020/06/26/project_mask_detect_v1/</link>
      <pubDate>Fri, 26 Jun 2020 15:04:08 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/06/26/project_mask_detect_v1/</guid>
      <description>The update of mask detection: https://bladesu.github.io/projects/mask_detect/v1/
Here I continue to develop mask detection project. Here is the update about deployment of previous work to PYNQ-Z2 board. If you have any comment, please leave me message, thank you.</description>
    </item>
    
    <item>
      <title>Try to make cross-compiling environment with library directory linked to target platform.</title>
      <link>https://bladesu.github.io/posts/2020/06/23/cmake_sshs_opencv/</link>
      <pubDate>Tue, 23 Jun 2020 16:39:44 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/06/23/cmake_sshs_opencv/</guid>
      <description>Recently I try to make cross-compiling environment with library directory linked to target platform. In the end, not all library is recognized by CMake, however, it is a light-weight approach to build a application with cross-compiling.
https://bladesu.github.io/learning/devops/cross_compilation/dockerized/0001_cmake_sshfs_opencv/</description>
    </item>
    
    <item>
      <title>Start project: a real-time mask detector.</title>
      <link>https://bladesu.github.io/posts/2020/06/19/start_project_mask_detect/</link>
      <pubDate>Fri, 19 Jun 2020 18:29:11 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/06/19/start_project_mask_detect/</guid>
      <description>Here I introduce my project which is just starting, a real-time image recognition project. Any technical feedback is welcome, thank you.
https://bladesu.github.io/projects/mask_detect/</description>
    </item>
    
    <item>
      <title>Porting Qt libraries and application to ARM-based environment,</title>
      <link>https://bladesu.github.io/posts/2020/06/08/qt_porting/</link>
      <pubDate>Tue, 09 Jun 2020 00:38:08 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/06/08/qt_porting/</guid>
      <description>Here I make a practice for application porting to ARM-based environment with leverage of docker container as build platform. This post contains not only application porting but also the Qt library. Finally I demonstrate the GUI application on a target platform(OrangePi, with sunxi H6 CPU) via VNC connection. Here is the link https://bladesu.github.io/learning/devops/cross_compilation/porting_app/qt_porting_orange_pi/.</description>
    </item>
    
    <item>
      <title>My implementation of malloc and free</title>
      <link>https://bladesu.github.io/posts/2020/05/15/impl_malloc_free_v1/</link>
      <pubDate>Fri, 15 May 2020 20:17:56 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/05/15/impl_malloc_free_v1/</guid>
      <description>Recently I implement a easier version of malloc and free. It is a practice of implementation of malloc and free to see the detail of how heap memory manipulation with system call by wraping functions in malloc library. Here is the link:https://bladesu.github.io/learning/linux_app/memory/impl_malloc_free_v1/.</description>
    </item>
    
    <item>
      <title>Do not call putenv() with a pointer to an automatic variable as the argument</title>
      <link>https://bladesu.github.io/posts/2020/05/08/about_posix_putenv/</link>
      <pubDate>Fri, 08 May 2020 09:34:44 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/05/08/about_posix_putenv/</guid>
      <description>New post here:https://bladesu.github.io/learning/linux_app/process/auto_vara_n_putenv
Here is the result of my: Do not call putenv() with a pointer to an automatic variable as the argument. This quite simple rule take me some time to find out why. And a little surprise here, I find there are the rules defined by CERT about C programing. That is cool! Good job, physicists.</description>
    </item>
    
    <item>
      <title>Posix API introduction: mkstemp.</title>
      <link>https://bladesu.github.io/posts/2020/04/30/post_for_linux_api_mkstemp/</link>
      <pubDate>Thu, 30 Apr 2020 17:28:42 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/04/30/post_for_linux_api_mkstemp/</guid>
      <description>A new post here: https://bladesu.github.io/learning/linux_app/fileio/api_mkstemp/
I start to introduce the some knowledge about system calls, posix API and application implementation on linux platform. Here we start with a convenient posix API mkstemp. Any feedbask is welcome, thank you.</description>
    </item>
    
    <item>
      <title>About string processing in C language.</title>
      <link>https://bladesu.github.io/posts/2020/04/07/post_for_c_string/</link>
      <pubDate>Tue, 07 Apr 2020 15:08:07 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/04/07/post_for_c_string/</guid>
      <description>A new post here: https://bladesu.github.io/learning/computer_languages/c_lang/confusing_concepts/pointer_to_char_and_string/
I introduce the some knowledge in C language for string processing here. Do you confuse about string in C? char *, string literal, char array, which one should I use in some case? If you have same problem, please read this article.</description>
    </item>
    
    <item>
      <title>Introduction with docker buildx for multiple CPU architecture development.</title>
      <link>https://bladesu.github.io/posts/2020/03/18/first_glance2docker_buildx/</link>
      <pubDate>Wed, 18 Mar 2020 21:02:23 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/03/18/first_glance2docker_buildx/</guid>
      <description>A new update here: learning/devops/cross_compilation/dockerized/0000_first_try.md
Here I introduce the new docker desktop feature which integrated with qemu and docker buildx command. Now we can build applications in docker images executed with different CPU architectures and run them above operation system with docker environment installed.</description>
    </item>
    
    <item>
      <title>A bug in docker desktop 2.2.0 for Mac OS</title>
      <link>https://bladesu.github.io/posts/2020/03/16/docker_desktop_bug/</link>
      <pubDate>Mon, 16 Mar 2020 16:38:31 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/03/16/docker_desktop_bug/</guid>
      <description>For Mac OS user, it should be a easy choice that applying Docker Desktop for docker environment setup. However I got a bug with container starting up for port binding, port 111 was in used status by Desktop I thought. It is a bug for Docker Desktop 2.2.0. Some user in the community had found it, I think it should be solved in the following version.
 https://github.com/docker/compose/issues/7188?fbclid=IwAR1qP7SstbtNA6em-yqFOZ4u172iB4HOVbA9rK26pvsVZaq8eXulPVE4iXQ https://github.com/docker/for-mac/issues/4264  updated: it is solved and fixed in docker desktop Docker Desktop Community 2.</description>
    </item>
    
    <item>
      <title>Start editing learning note for GNU make.</title>
      <link>https://bladesu.github.io/posts/2020/03/04/start_gnu_make/</link>
      <pubDate>Wed, 04 Mar 2020 22:19:33 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/03/04/start_gnu_make/</guid>
      <description>GNU make should be most generous building tool or fundation of large building system for C/C++ project. Here I start to write some note for problems when applying GNU make into my projects. It should be updated here: learning/building_tool.</description>
    </item>
    
    <item>
      <title>Coding in C, C standard should be most reliable reference material than everything.</title>
      <link>https://bladesu.github.io/posts/2020/03/03/standard_is_most_important_in_c/</link>
      <pubDate>Tue, 03 Mar 2020 22:22:27 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/03/03/standard_is_most_important_in_c/</guid>
      <description>Recently, I start to code a lot in c language. One of my studying material is &amp;ldquo;Head First C&amp;rdquo; written by David Griffith. And I am so confused about an example it talking about XOR encrption.
void encrpt(char *mes) { while (*mes) { *mes = *mes ^ 31; mes++; } } } This code could be compiled without any error or warning (Apple LLVM version 9.1.0 (clang-902.0.39.1)). But I am really curious about how XOR operator worker on the two operand *mes and the integer literal 31.</description>
    </item>
    
    <item>
      <title>My first post</title>
      <link>https://bladesu.github.io/posts/2020/02/19/my-first-post/</link>
      <pubDate>Wed, 19 Feb 2020 18:56:57 +0800</pubDate>
      
      <guid>https://bladesu.github.io/posts/2020/02/19/my-first-post/</guid>
      <description>Thank you for reading this post. This is the first one in my blog.
Since I had connected to internect, I got a lot of knowlege from enormous amount of website. However it really hard to digest and organize all of them.
So I start this blog to put my idea and information collected. If I take something wrong, or you gain from something here. Please give me feedback, thank you.</description>
    </item>
    
  </channel>
</rss>