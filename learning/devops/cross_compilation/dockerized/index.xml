<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dockerized environments on Blade Su The Coder</title>
    <link>https://bladesu.github.io/learning/devops/cross_compilation/dockerized/</link>
    <description>Recent content in Dockerized environments on Blade Su The Coder</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 23 Jun 2020 16:19:22 +0800</lastBuildDate>
    
	<atom:link href="https://bladesu.github.io/learning/devops/cross_compilation/dockerized/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Contents(Read Me First)</title>
      <link>https://bladesu.github.io/learning/devops/cross_compilation/dockerized/contents/</link>
      <pubDate>Tue, 23 Jun 2020 16:20:22 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/devops/cross_compilation/dockerized/contents/</guid>
      <description>Docker images and container deployment for multiple CPU architecture developments.  A first glance for ARM docker container building and running  Try to make cross-compiling environment with library directory linked to target platform.  Apply cmake and pkg-config with mounted target root file system  </description>
    </item>
    
    <item>
      <title>Apply cmake and pkg-config with mounted target root file system</title>
      <link>https://bladesu.github.io/learning/devops/cross_compilation/dockerized/0001_cmake_sshfs_opencv/</link>
      <pubDate>Tue, 23 Jun 2020 16:19:22 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/devops/cross_compilation/dockerized/0001_cmake_sshfs_opencv/</guid>
      <description>git repository: link
This is a project that I try to make a cross-compile environment which link to libraries of targetâ€™s platform with sshfs in a light-weight docker container. I try to compile OpenCV 3.4.10 for the the target board PYNQ-Z2 with Xilinx XC7Z020-1CLG400C SOC.
First, I try to dig the toolchain applied in the board by gcc -v
xilinx@pynq:/usr/local/bin$ gcc -v Using built-in specs. COLLECT_GCC=gcc COLLECT_LTO_WRAPPER=/usr/lib/gcc/arm-linux-gnueabihf/7/lto-wrapper Target: arm-linux-gnueabihf Configured with: .</description>
    </item>
    
    <item>
      <title>First try to development with ARM docker container[Experimental Feature]</title>
      <link>https://bladesu.github.io/learning/devops/cross_compilation/dockerized/0000_first_try/</link>
      <pubDate>Wed, 18 Mar 2020 11:44:16 +0800</pubDate>
      
      <guid>https://bladesu.github.io/learning/devops/cross_compilation/dockerized/0000_first_try/</guid>
      <description>Build once, run everywhere. Like Java language. Here comes a convenient way to write and deploy application with multiple CPU archtecture articultures attributed by integrated dockerized environments: Docker Desktop(after v2.1.0)
Prepare Docker environment: The environment in this demo I prepared:
 host os: macOS High Sierra 10.13.6 docker environment: integrated in docker desktop v2.1.0.5 (you can check stable release here:link)  Here we need to use docker buildx command, which is provided by docker desktop after v2.</description>
    </item>
    
  </channel>
</rss>